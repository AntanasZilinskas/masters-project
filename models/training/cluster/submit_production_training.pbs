#!/bin/bash
#PBS -N production_training
#PBS -l walltime=12:00:00
#PBS -l select=1:ncpus=8:mem=32gb:ngpus=1:gpu_type=RTX6000
#PBS -J 1-45
#PBS -j oe

# EVEREST Production Training - Array Job Submission
# 45 experiments: 9 targets (C/M/M5 √ó 24h/48h/72h) √ó 5 seeds
# Applies all learnings from ablation study debugging

set -e  # Exit on any error

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üè≠ EVEREST Production Training - Job ${PBS_ARRAY_INDEX}/45"
log "Node: $(hostname)"
log "Date: $(date)"

# Initialize conda
source ~/miniforge3/etc/profile.d/conda.sh

# Change to submission directory first
cd $PBS_O_WORKDIR
echo "Submission directory: $(pwd)"

# Navigate to project root (where models/ directory is located)
cd ../../
PROJECT_ROOT=$(pwd)
echo "Project root: $PROJECT_ROOT"

# Verify we're in the right directory (should see models/ directory)
if [ ! -d "models" ]; then
    echo "‚ùå models directory not found - wrong location"
    exit 1
fi

# Activate conda environment (using everest_env from ablation learnings)
conda activate everest_env

# Set environment variables for GPU and Python path
export CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES
export PYTHONPATH=$PROJECT_ROOT:$PYTHONPATH
export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$LD_LIBRARY_PATH"

echo "Array job ${PBS_ARRAY_INDEX}: Running production training experiments"
echo "Using GPU: $CUDA_VISIBLE_DEVICES"
echo "Conda environment: $CONDA_DEFAULT_ENV"
echo "Python executable: $(which python)"
echo "Python version: $(python --version)"

# Validate GPU availability
echo "Validating GPU..."
python -c "
import torch
if torch.cuda.is_available():
    gpu_name = torch.cuda.get_device_name(0)
    print(f'‚úÖ GPU available: {gpu_name}')
else:
    print('‚ùå GPU not available - training cannot proceed')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå GPU validation failed - terminating job"
    exit 1
fi

# Test pandas compatibility (from ablation learnings)
echo "Testing pandas compatibility..."
python -c "
import pandas as pd
print(f'‚úÖ Pandas {pd.__version__} working correctly')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Pandas compatibility failed - terminating job"
    exit 1
fi

# Validate production training imports
echo "Validating production training imports..."
python -c "
import sys
sys.path.insert(0, '.')
from models.solarknowledge_ret_plus import RETPlusWrapper
from models.training.config import get_array_job_mapping
from models.training.run_production_training import run_array_job_experiment
print('‚úÖ All production training imports successful')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Import validation failed - terminating job"
    exit 1
fi

# Get experiment configuration for this array index
echo "Getting experiment configuration for job ${PBS_ARRAY_INDEX}..."
python -c "
import sys
sys.path.insert(0, '.')
from models.training.config import get_array_job_mapping

mapping = get_array_job_mapping()
if ${PBS_ARRAY_INDEX} in mapping:
    exp = mapping[${PBS_ARRAY_INDEX}]
    print(f'‚úÖ Job ${PBS_ARRAY_INDEX}: {exp[\"experiment_name\"]}')
    print(f'   Target: {exp[\"flare_class\"]}-class, {exp[\"time_window\"]}h')
    print(f'   Seed: {exp[\"seed\"]}')
else:
    print(f'‚ùå Invalid array index: ${PBS_ARRAY_INDEX}')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå Experiment configuration failed - terminating job"
    exit 1
fi

# Run the production training experiment
echo "üéØ Starting production training experiment..."
python -c "
import sys
sys.path.insert(0, '.')
from models.training.run_production_training import run_array_job_experiment

try:
    result = run_array_job_experiment(${PBS_ARRAY_INDEX})
    
    if result['status'] == 'success':
        print(f'‚úÖ Experiment completed successfully')
        print(f'   Name: {result[\"experiment_name\"]}')
        if 'results' in result and 'final_metrics' in result['results']:
            metrics = result['results']['final_metrics']
            print(f'   TSS: {metrics.get(\"tss\", \"N/A\"):.4f}')
            print(f'   Accuracy: {metrics.get(\"accuracy\", \"N/A\"):.4f}')
            print(f'   F1: {metrics.get(\"f1\", \"N/A\"):.4f}')
        if 'results' in result and 'optimal_threshold' in result['results']:
            print(f'   Optimal threshold: {result[\"results\"][\"optimal_threshold\"]:.3f}')
    else:
        print(f'‚ùå Experiment failed: {result[\"error\"]}')
        exit(1)
        
except Exception as e:
    print(f'‚ùå Training execution failed: {e}')
    import traceback
    traceback.print_exc()
    exit(1)
"

experiment_exit_code=$?

# Check exit status and provide detailed feedback
if [ $experiment_exit_code -eq 0 ]; then
    echo "‚úÖ Production training experiment completed successfully"
    echo "   Job: ${PBS_ARRAY_INDEX}/45"
    echo "   Completed at: $(date)"
else
    echo "‚ùå Production training experiment failed"
    echo "   Job: ${PBS_ARRAY_INDEX}/45"
    echo "   Failed at: $(date)"
    exit 1
fi

echo "üèÅ Job ${PBS_ARRAY_INDEX} finished at $(date)" 