#!/bin/bash
#PBS -l select=1:ncpus=4:mem=24gb:ngpus=1
#PBS -l walltime=12:00:00
#PBS -N ablation_exact_hpo
#PBS -J 1-10
#PBS -o ablation_exact_${PBS_ARRAY_INDEX}.out
#PBS -e ablation_exact_${PBS_ARRAY_INDEX}.err

# EVEREST Ablation Study - EXACT HPO Pattern

# Initialize conda (EXACT same as HPO)
source ~/miniforge3/etc/profile.d/conda.sh

# Change to submission directory (EXACT same as HPO)
cd $PBS_O_WORKDIR

# Verify we're in the right directory (EXACT same as HPO)
echo "Working directory: $(pwd)"
echo "Contents: $(ls -la | head -5)"

# Activate conda environment (EXACT same as HPO)
conda activate everest_env

# Set environment variables for GPU (EXACT same as HPO)
export CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES
export PYTHONPATH=$PBS_O_WORKDIR:$PYTHONPATH

# Define experiment configurations (same structure as HPO)
declare -a VARIANTS=("full_model" "no_evidential" "no_evt" "mean_pool" "cross_entropy" "no_precursor" "fp32_training")
declare -a SEEDS=(0 1 2 3 4)
declare -a SEQ_VARIANTS=("seq_5" "seq_7" "seq_10" "seq_15" "seq_20")

# Create complete experiment list (60 total experiments)
ALL_EXPERIMENTS=()

# Add component ablations (7 variants √ó 5 seeds = 35 experiments)
for variant in "${VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        ALL_EXPERIMENTS+=("component:$variant:$seed")
    done
done

# Add sequence length ablations (5 variants √ó 5 seeds = 25 experiments)
for seq in "${SEQ_VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        ALL_EXPERIMENTS+=("sequence:$seq:$seed")
    done
done

TOTAL_EXPERIMENTS=${#ALL_EXPERIMENTS[@]}

# Calculate which experiments this array job should run (same logic as HPO)
EXPERIMENTS_PER_JOB=$((TOTAL_EXPERIMENTS / 10))
REMAINDER=$((TOTAL_EXPERIMENTS % 10))

if [ $PBS_ARRAY_INDEX -le $REMAINDER ]; then
    EXPERIMENTS_FOR_THIS_JOB=$((EXPERIMENTS_PER_JOB + 1))
    START_IDX=$(((PBS_ARRAY_INDEX - 1) * (EXPERIMENTS_PER_JOB + 1)))
else
    EXPERIMENTS_FOR_THIS_JOB=$EXPERIMENTS_PER_JOB
    START_IDX=$((REMAINDER * (EXPERIMENTS_PER_JOB + 1) + (PBS_ARRAY_INDEX - 1 - REMAINDER) * EXPERIMENTS_PER_JOB))
fi

END_IDX=$((START_IDX + EXPERIMENTS_FOR_THIS_JOB - 1))

echo "Array job ${PBS_ARRAY_INDEX}: Running experiments $((START_IDX + 1)) to $((END_IDX + 1))"
echo "Using GPU: $CUDA_VISIBLE_DEVICES"
echo "Conda environment: $CONDA_DEFAULT_ENV"
echo "Python path: $PYTHONPATH"
echo "Python executable: $(which python)"
echo "Python version: $(python --version)"

# Test basic imports before running the main script (EXACT same as HPO)
echo "Testing imports..."
python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
python -c "import models.ablation; print('Ablation imports successful')"

# Validate GPU availability - CRITICAL (EXACT same as HPO)
echo "Validating GPU..."
python -c "
import torch
if torch.cuda.is_available():
    gpu_name = torch.cuda.get_device_name(0)
    print(f'‚úÖ GPU available: {gpu_name}')
else:
    print('‚ùå GPU not available - ablation cannot proceed')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå GPU validation failed - terminating job"
    exit 1
fi

echo "Starting ablation experiments..."

# Monitor available resources (EXACT same as HPO)
echo "Memory info: $(free -h | head -2)"
echo "Disk space: $(df -h . | tail -1)"
echo "GPU memory: $(nvidia-smi --query-gpu=memory.total,memory.used --format=csv,noheader,nounits || echo 'GPU info unavailable')"

# Run experiments sequentially
for i in $(seq $START_IDX $END_IDX); do
    experiment=${ALL_EXPERIMENTS[$i]}
    exp_num=$((i + 1))
    local_exp_num=$((i - START_IDX + 1))
    
    echo ""
    echo "üî¨ [$local_exp_num/$EXPERIMENTS_FOR_THIS_JOB] Global: [$exp_num/$TOTAL_EXPERIMENTS] Running: $experiment"
    
    # Parse experiment string
    IFS=':' read -r exp_type variant_or_seq seed <<< "$experiment"
    
    # Run the appropriate experiment using the HPO-style runner (EXACT same pattern as HPO)
    if [ "$exp_type" = "component" ]; then
        python models/ablation/run_ablation_hpo_style.py --variant $variant_or_seq --seed $seed
    else
        python models/ablation/run_ablation_hpo_style.py --variant full_model --seed $seed --sequence $variant_or_seq
    fi
    
    exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "   ‚úÖ Completed successfully"
    else
        echo "   ‚ùå Failed with exit code $exit_code"
    fi
done

echo "Completed ablation experiments for array job ${PBS_ARRAY_INDEX}" 