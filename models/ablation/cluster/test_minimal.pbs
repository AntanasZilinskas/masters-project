#!/bin/bash
#PBS -l select=1:ncpus=4:mem=24gb:ngpus=1
#PBS -l walltime=01:00:00
#PBS -N ablation_test_minimal
#PBS -o ablation_test_minimal.out
#PBS -e ablation_test_minimal.err

# EVEREST Ablation Study - Minimal Test (No Pandas)
# Tests core functionality without pandas dependencies

set -e  # Exit on any error

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "=== EVEREST Ablation Study - Minimal Test (No Pandas) ==="
log "Job ID: ${PBS_JOBID}"
log "Node: $(hostname)"

# Load system modules for compatibility
log "Loading system modules..."
module load gcc/9.3.0 2>/dev/null || log "GCC module not available"
module load cuda/11.8 2>/dev/null || log "CUDA module not available"

# Initialize conda
log "Initializing conda..."
source ~/miniforge3/etc/profile.d/conda.sh

# Change to submission directory
log "Changing to submission directory..."
cd $PBS_O_WORKDIR

log "Working directory: $(pwd)"

# Activate conda environment
log "Activating conda environment..."
conda activate everest_env

log "Conda environment: $CONDA_DEFAULT_ENV"

# Set environment variables for library compatibility
export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$LD_LIBRARY_PATH"
export CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES
export PYTHONPATH=$PBS_O_WORKDIR:$PYTHONPATH

log "GPU device: $CUDA_VISIBLE_DEVICES"
log "Python executable: $(which python)"
log "Python version: $(python --version)"

# Test basic imports first
log "Testing basic imports..."
python -c "
import sys
import os
import numpy as np
import torch

print('✅ NumPy:', np.__version__)
print('✅ PyTorch:', torch.__version__)

if torch.cuda.is_available():
    print('✅ CUDA available:', torch.cuda.get_device_name(0))
else:
    print('⚠️ CUDA not available')
"

# Test pandas separately (expect it to fail gracefully)
log "Testing pandas import (expected to fail)..."
python -c "
try:
    import pandas as pd
    print('✅ Pandas:', pd.__version__)
except ImportError as e:
    if 'GLIBCXX' in str(e):
        print('⚠️ Expected: Pandas has libstdc++ compatibility issue')
    else:
        print('⚠️ Pandas import issue:', e)
except Exception as e:
    print('⚠️ Pandas failed:', e)
print('Continuing without pandas...')
"

# Test core ablation imports (without data loading)
log "Testing core ablation imports..."
python -c "
import sys
import os
sys.path.insert(0, os.getcwd())

try:
    from models.solarknowledge_ret_plus import RETPlusWrapper
    print('✅ RETPlusWrapper imported')
    
    from models.ablation.config import OPTIMAL_HYPERPARAMS
    print('✅ Ablation config imported')
    
    print('✅ Core ablation imports successful')
except Exception as e:
    print('❌ Core ablation import failed:', e)
    import traceback
    traceback.print_exc()
    sys.exit(1)
"

# Test model creation with dummy data
log "Testing model creation with dummy data..."
python -c "
import sys
import os
import torch
import numpy as np
sys.path.insert(0, os.getcwd())

try:
    from models.solarknowledge_ret_plus import RETPlusWrapper
    
    # Create model with standard input shape
    input_shape = (10, 9)
    model = RETPlusWrapper(input_shape)
    print('✅ Model created successfully')
    
    # Test forward pass with dummy data
    dummy_input = torch.randn(32, 10, 9).to(next(model.model.parameters()).device)
    with torch.no_grad():
        output = model.model(dummy_input)
    print('✅ Forward pass successful')
    print('✅ Model output shape:', output['logits'].shape)
    
except Exception as e:
    print('❌ Model test failed:', e)
    import traceback
    traceback.print_exc()
    sys.exit(1)
"

# Test pandas-free ablation runner
log "Testing pandas-free ablation runner..."
python models/ablation/run_ablation_no_pandas.py --variant full_model --seed 0 --epochs 1

log "Minimal test completed successfully!"
log "✅ All core functionality works without pandas"
log "✅ Ready to proceed with full ablation study" 