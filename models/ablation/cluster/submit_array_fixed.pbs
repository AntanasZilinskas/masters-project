#!/bin/bash
#PBS -N everest_ablation_fixed
#PBS -l walltime=12:00:00
#PBS -l select=1:ncpus=8:mem=64gb:ngpus=1
#PBS -J 1-10
#PBS -j oe
#PBS -o logs/

# EVEREST Ablation Study - Fixed Array Job
# Fixed import path issues by calling script directly

# Load environment
module load anaconda3/personal
source activate everest_env

# Set up paths
cd $PBS_O_WORKDIR
export PYTHONPATH="${PBS_O_WORKDIR}:${PYTHONPATH}"

# Create logs directory
mkdir -p logs
mkdir -p models/ablation/results

# Create a unique log file for this array job
LOG_FILE="logs/ablation_array_${PBS_JOBID}_${PBS_ARRAY_INDEX}.log"
exec > "$LOG_FILE" 2>&1

echo "=== EVEREST Ablation Study - Array Job ${PBS_ARRAY_INDEX}/10 ==="
echo "Job ID: ${PBS_JOBID}"
echo "Array Index: ${PBS_ARRAY_INDEX}"
echo "Node: $(hostname)"
echo "Working Directory: $(pwd)"
echo "Log File: $LOG_FILE"
echo "Start Time: $(date)"
echo ""

# Check environment
echo "Checking environment..."
which python
python --version
echo "GPU Device: $CUDA_VISIBLE_DEVICES"
nvidia-smi
echo ""

# Test imports before running experiments
echo "Testing imports..."
python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
python -c "import sys; sys.path.append('models'); from solarknowledge_ret_plus import RETPlusWrapper; print('✅ EVEREST imports successful')"
python -c "import sys; sys.path.append('models'); from utils import get_training_data; print('✅ Utils imports successful')"

# Define all experiment configurations
VARIANTS=("full_model" "no_evidential" "no_evt" "mean_pool" "cross_entropy" "no_precursor" "fp32_training")
SEEDS=(0 1 2 3 4)
SEQ_VARIANTS=("seq_5" "seq_7" "seq_10" "seq_15" "seq_20")

# Create complete experiment list
ALL_EXPERIMENTS=()

# Add component ablations (7 variants × 5 seeds = 35 experiments)
for variant in "${VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        ALL_EXPERIMENTS+=("component:$variant:$seed")
    done
done

# Add sequence length ablations (5 variants × 5 seeds = 25 experiments)
for seq in "${SEQ_VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        ALL_EXPERIMENTS+=("sequence:$seq:$seed")
    done
done

TOTAL_EXPERIMENTS=${#ALL_EXPERIMENTS[@]}

# Calculate experiments for this array job
EXPERIMENTS_PER_JOB=$((TOTAL_EXPERIMENTS / 10))
REMAINDER=$((TOTAL_EXPERIMENTS % 10))

# Distribute experiments
if [ $PBS_ARRAY_INDEX -le $REMAINDER ]; then
    EXPERIMENTS_FOR_THIS_JOB=$((EXPERIMENTS_PER_JOB + 1))
    START_IDX=$(((PBS_ARRAY_INDEX - 1) * (EXPERIMENTS_PER_JOB + 1)))
else
    EXPERIMENTS_FOR_THIS_JOB=$EXPERIMENTS_PER_JOB
    START_IDX=$((REMAINDER * (EXPERIMENTS_PER_JOB + 1) + (PBS_ARRAY_INDEX - 1 - REMAINDER) * EXPERIMENTS_PER_JOB))
fi

END_IDX=$((START_IDX + EXPERIMENTS_FOR_THIS_JOB - 1))

echo "📊 Experiment Assignment for Array Job ${PBS_ARRAY_INDEX}:"
echo "   Total experiments: $TOTAL_EXPERIMENTS"
echo "   Experiments for this job: $EXPERIMENTS_FOR_THIS_JOB"
echo "   Experiment range: $((START_IDX + 1)) to $((END_IDX + 1))"
echo ""

# Function to run single experiment
run_experiment() {
    local experiment=$1
    local exp_num=$2
    local local_exp_num=$3
    
    # Parse experiment string
    IFS=':' read -r exp_type variant_or_seq seed <<< "$experiment"
    
    echo "🔬 [Array ${PBS_ARRAY_INDEX}] [$local_exp_num/$EXPERIMENTS_FOR_THIS_JOB] Global: [$exp_num/$TOTAL_EXPERIMENTS]"
    echo "   Type: $exp_type"
    echo "   Variant/Seq: $variant_or_seq"
    echo "   Seed: $seed"
    echo "   Time: $(date)"
    
    # Run the appropriate experiment - FIXED: Call script directly like HPO
    if [ "$exp_type" = "component" ]; then
        timeout 7200 python models/ablation/trainer.py --variant $variant_or_seq --seed $seed
    else
        timeout 7200 python models/ablation/trainer.py --variant full_model --seed $seed --sequence $variant_or_seq
    fi
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "   ✅ Completed successfully"
    elif [ $exit_code -eq 124 ]; then
        echo "   ⏰ Timeout after 2 hours"
    else
        echo "   ❌ Failed with exit code $exit_code"
    fi
    
    echo "   Finished at $(date)"
    echo ""
    
    return $exit_code
}

# Sequential execution of assigned experiments
start_time=$(date +%s)
completed=0
failed=0

echo "🚀 Starting sequential execution of $EXPERIMENTS_FOR_THIS_JOB experiments..."
echo ""

for i in $(seq $START_IDX $END_IDX); do
    local_exp_num=$((i - START_IDX + 1))
    global_exp_num=$((i + 1))
    
    run_experiment "${ALL_EXPERIMENTS[$i]}" $global_exp_num $local_exp_num
    
    if [ $? -eq 0 ]; then
        ((completed++))
    else
        ((failed++))
    fi
    
    # Check remaining walltime
    elapsed=$(($(date +%s) - start_time))
    remaining=$((43200 - elapsed))  # 12 hours = 43200 seconds
    
    if [ $remaining -lt 7200 ]; then  # Less than 2 hours
        echo "⚠️  Less than 2 hours remaining, stopping early"
        echo "   Completed: $local_exp_num/$EXPERIMENTS_FOR_THIS_JOB experiments"
        break
    fi
    
    echo "⏱️  Progress: $local_exp_num/$EXPERIMENTS_FOR_THIS_JOB | Remaining: $((remaining/3600))h"
    
    # Brief pause between experiments
    sleep 30
done

# Summary
total_time=$(($(date +%s) - start_time))
echo ""
echo "🎉 Array job ${PBS_ARRAY_INDEX} completed!"
echo "   Assigned experiments: $EXPERIMENTS_FOR_THIS_JOB"
echo "   Completed successfully: $completed"
echo "   Failed: $failed"
echo "   Total time: $((total_time/3600))h $((total_time%3600/60))m"

echo ""
echo "End Time: $(date)" 