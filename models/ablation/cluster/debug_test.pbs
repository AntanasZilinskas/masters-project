#!/bin/bash
#PBS -N debug_test
#PBS -l walltime=00:30:00
#PBS -l select=1:ncpus=4:mem=16gb:ngpus=1
#PBS -j oe
#PBS -o logs/

# Debug test for EVEREST ablation issues

# Load environment
module load anaconda3/personal
source activate everest_env

# Set up paths
cd $PBS_O_WORKDIR
export PYTHONPATH="${PBS_O_WORKDIR}:${PYTHONPATH}"

# Create logs directory
mkdir -p logs

# Create a unique log file
LOG_FILE="logs/debug_test_${PBS_JOBID}.log"
exec > "$LOG_FILE" 2>&1

echo "=== EVEREST Debug Test ==="
echo "Job ID: ${PBS_JOBID}"
echo "Node: $(hostname)"
echo "Working Directory: $(pwd)"
echo "Start Time: $(date)"
echo ""

# Check environment
echo "Environment check:"
echo "  Python: $(which python)"
echo "  Python version: $(python --version)"
echo "  Conda env: $CONDA_DEFAULT_ENV"
echo "  GPU: $CUDA_VISIBLE_DEVICES"
echo "  PYTHONPATH: $PYTHONPATH"
echo ""

# List directory contents
echo "Directory contents:"
ls -la | head -10
echo ""

# Check if models directory exists
echo "Models directory check:"
if [ -d "models" ]; then
    echo "✅ models/ directory exists"
    ls models/ | head -5
else
    echo "❌ models/ directory not found"
fi
echo ""

# Check if ablation directory exists
echo "Ablation directory check:"
if [ -d "models/ablation" ]; then
    echo "✅ models/ablation/ directory exists"
    ls models/ablation/ | head -5
else
    echo "❌ models/ablation/ directory not found"
fi
echo ""

# Test basic Python execution
echo "Testing basic Python execution:"
python -c "print('✅ Python execution works')"
echo ""

# Test basic imports
echo "Testing basic imports:"
python -c "
try:
    import torch
    print(f'✅ PyTorch: {torch.__version__}')
except Exception as e:
    print(f'❌ PyTorch import failed: {e}')

try:
    import numpy as np
    print(f'✅ NumPy: {np.__version__}')
except Exception as e:
    print(f'❌ NumPy import failed: {e}')
"
echo ""

# Test EVEREST imports
echo "Testing EVEREST imports:"
python -c "
import sys
import os
sys.path.append('models')
try:
    from solarknowledge_ret_plus import RETPlusWrapper
    print('✅ RETPlusWrapper imported successfully')
except Exception as e:
    print(f'❌ RETPlusWrapper import failed: {e}')
    import traceback
    traceback.print_exc()

try:
    from utils import get_training_data
    print('✅ Utils imported successfully')
except Exception as e:
    print(f'❌ Utils import failed: {e}')
    import traceback
    traceback.print_exc()
"
echo ""

# Test ablation trainer import
echo "Testing ablation trainer import:"
python models/ablation/cluster_test.py
echo ""

# Test simple trainer execution
echo "Testing simple trainer execution:"
python models/ablation/trainer.py --help
echo ""

echo "Debug test completed at $(date)" 