#!/bin/bash
#PBS -N everest_component_ablation_metadata
#PBS -l walltime=12:00:00
#PBS -l select=1:ncpus=8:mem=32gb:ngpus=1:gpu_type=RTX6000
#PBS -J 1-35
#PBS -j oe
#PBS -o everest_component_ablation_metadata.o

# EVEREST Component Ablation Study - Enhanced Metadata Tracking
# 35 experiments: 7 variants √ó 5 seeds
# Each job runs one variant-seed combination
# Models saved to: models/models/EVEREST-v{version}-M5-72h/

echo "üî¨ EVEREST Component Ablation Study - Enhanced Metadata"
echo "Job ID: $PBS_JOBID"
echo "Array Index: $PBS_ARRAY_INDEX"
echo "Node: $(hostname)"
echo "Started: $(date)"
echo "=" * 60

# Navigate to project root (two levels up from submission directory)
cd $PBS_O_WORKDIR
cd ../../
PROJECT_ROOT=$(pwd)
echo "Project root: $PROJECT_ROOT"

# Verify we're in the right place
if [ ! -d "models" ]; then
    echo "‚ùå Error: models/ directory not found. Current directory: $(pwd)"
    echo "Expected to be in project root with models/ subdirectory"
    exit 1
fi

echo "‚úÖ Project structure verified"

# Set Python path
export PYTHONPATH="$PROJECT_ROOT:$PYTHONPATH"

# Activate conda environment
echo "üêç Activating everest_env conda environment..."
source ~/.bashrc
conda activate everest_env

if [ $? -ne 0 ]; then
    echo "‚ùå Failed to activate everest_env"
    exit 1
fi

echo "‚úÖ Environment activated: $(conda info --envs | grep '*')"

# Validate environment
echo "üîç Validating environment..."
python -c "
import sys
print(f'Python: {sys.version}')
import torch
print(f'PyTorch: {torch.__version__}')
print(f'CUDA available: {torch.cuda.is_available()}')
if torch.cuda.is_available():
    print(f'GPU: {torch.cuda.get_device_name(0)}')
import numpy as np
print(f'NumPy: {np.__version__}')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Environment validation failed"
    exit 1
fi

echo "‚úÖ Environment validation passed"

# Define experiment mapping (35 total combinations)
# 7 variants √ó 5 seeds = 35 experiments
variants=("full_model" "no_evidential" "no_evt" "mean_pool" "cross_entropy" "no_precursor" "fp32_training")
seeds=(0 1 2 3 4)

# Calculate variant and seed from array index
variant_idx=$(( ($PBS_ARRAY_INDEX - 1) / 5 ))
seed_idx=$(( ($PBS_ARRAY_INDEX - 1) % 5 ))

variant=${variants[$variant_idx]}
seed=${seeds[$seed_idx]}

echo "üéØ Experiment Configuration:"
echo "   Array Index: $PBS_ARRAY_INDEX"
echo "   Variant: $variant (index $variant_idx)"
echo "   Seed: $seed (index $seed_idx)"
echo "   Script: models/ablation/run_ablation_with_metadata.py"

# Run the ablation experiment
echo "üöÄ Starting ablation experiment..."
echo "Command: python models/ablation/run_ablation_with_metadata.py --variant $variant --seed $seed"

python models/ablation/run_ablation_with_metadata.py --variant $variant --seed $seed

exit_code=$?

echo "üìä Experiment completed with exit code: $exit_code"
echo "Finished: $(date)"

if [ $exit_code -eq 0 ]; then
    echo "‚úÖ Experiment completed successfully!"
    echo "üè∑Ô∏è  Enhanced metadata saved with variant=$variant, seed=$seed"
else
    echo "‚ùå Experiment failed with exit code: $exit_code"
fi

exit $exit_code 