#!/bin/bash
#PBS -N everest_ablation_node
#PBS -l walltime=24:00:00
#PBS -l select=1:ncpus=64:mem=450gb:ngpus=8
#PBS -j oe
#PBS -o logs/ablation_node_${PBS_JOBID}.log

# EVEREST Ablation Study - Whole Node Approach (Correct for Imperial RCS)
# No queue specified - PBS routing will automatically place in appropriate queue
# Requests 8 GPUs, 64 CPUs, 450GB RAM (fits large24 queue)

# Load environment
module load anaconda3/personal
source activate everest_env

# Set up paths
cd $PBS_O_WORKDIR
export PYTHONPATH="${PBS_O_WORKDIR}:${PYTHONPATH}"

# Create logs directory
mkdir -p logs
mkdir -p models/ablation/results

echo "=== EVEREST Ablation Study - Whole Node (Correct) ==="
echo "Job ID: $PBS_JOBID"
echo "Node: $(hostname)"
echo "Working Directory: $(pwd)"
echo "Available GPUs: $CUDA_VISIBLE_DEVICES"
echo "CPUs: 64"
echo "Memory: 450GB"
echo "Queue: Auto-routed by PBS"
echo "Start Time: $(date)"
echo ""

# Check GPU availability and type
nvidia-smi
echo ""

# Define experiment configurations
VARIANTS=("full_model" "no_evidential" "no_evt" "mean_pool" "cross_entropy" "no_precursor" "fp32_training")
SEEDS=(0 1 2 3 4)  # All 5 seeds for full statistical power
SEQ_VARIANTS=("seq_5" "seq_7" "seq_10" "seq_15" "seq_20")

# Create experiment queue
EXPERIMENTS=()

# Add component ablations
for variant in "${VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        EXPERIMENTS+=("component:$variant:$seed")
    done
done

# Add sequence length ablations
for seq in "${SEQ_VARIANTS[@]}"; do
    for seed in "${SEEDS[@]}"; do
        EXPERIMENTS+=("sequence:$seq:$seed")
    done
done

TOTAL_EXPERIMENTS=${#EXPERIMENTS[@]}

# Get actual GPU IDs from CUDA_VISIBLE_DEVICES
if [ -z "$CUDA_VISIBLE_DEVICES" ]; then
    echo "‚ö†Ô∏è  CUDA_VISIBLE_DEVICES not set, assuming single GPU"
    GPU_ARRAY=(0)
else
    IFS=',' read -ra GPU_ARRAY <<< "$CUDA_VISIBLE_DEVICES"
fi

ACTUAL_NUM_GPUS=${#GPU_ARRAY[@]}

echo "üìä Experiment Plan:"
echo "   Component ablations: $((${#VARIANTS[@]} * ${#SEEDS[@]}))"
echo "   Sequence ablations: $((${#SEQ_VARIANTS[@]} * ${#SEEDS[@]}))"
echo "   Total experiments: $TOTAL_EXPERIMENTS"
echo "   Detected GPUs: $ACTUAL_NUM_GPUS (${GPU_ARRAY[*]})"
echo "   Updated hyperparameters: embed_dim=64, num_blocks=8, batch_size=1024"
echo "   Expected GPU types: L40S (48GB) or A100 (40GB)"
echo ""

# Function to run experiment on specific GPU
run_experiment_on_gpu() {
    local gpu_id=$1
    local experiment=$2
    local exp_num=$3
    
    # Parse experiment string
    IFS=':' read -r exp_type variant_or_seq seed <<< "$experiment"
    
    echo "üî¨ [GPU $gpu_id] [$exp_num/$TOTAL_EXPERIMENTS] Starting:"
    echo "   Type: $exp_type"
    echo "   Variant/Seq: $variant_or_seq"
    echo "   Seed: $seed"
    echo "   Time: $(date)"
    
    # Set GPU for this experiment
    export CUDA_VISIBLE_DEVICES=$gpu_id
    
    # Run the appropriate experiment
    if [ "$exp_type" = "component" ]; then
        timeout 7200 python -m ablation.trainer --variant $variant_or_seq --seed $seed
    else
        timeout 7200 python -m ablation.trainer --variant full_model --seed $seed --sequence $variant_or_seq
    fi
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "   ‚úÖ [GPU $gpu_id] Completed successfully"
    elif [ $exit_code -eq 124 ]; then
        echo "   ‚è∞ [GPU $gpu_id] Timeout after 2 hours"
    else
        echo "   ‚ùå [GPU $gpu_id] Failed with exit code $exit_code"
    fi
    
    return $exit_code
}

# Parallel execution manager
start_time=$(date +%s)
completed=0
failed=0

echo "üéØ Using $ACTUAL_NUM_GPUS GPUs: ${GPU_ARRAY[*]}"

if [ $ACTUAL_NUM_GPUS -gt 1 ]; then
    echo "üöÄ Starting parallel execution on $ACTUAL_NUM_GPUS GPUs..."
    
    # Initialize GPU queues
    declare -a gpu_queues
    for i in $(seq 0 $((ACTUAL_NUM_GPUS-1))); do
        gpu_queues[$i]=""
    done
    
    # Distribute experiments across available GPUs
    for i in "${!EXPERIMENTS[@]}"; do
        gpu_idx=$((i % ACTUAL_NUM_GPUS))
        gpu_queues[$gpu_idx]+="$i "
    done
    
    # Launch experiments on each GPU
    gpu_pids=()
    for gpu_idx in $(seq 0 $((ACTUAL_NUM_GPUS-1))); do
        gpu_id=${GPU_ARRAY[$gpu_idx]}
        {
            for exp_idx in ${gpu_queues[$gpu_idx]}; do
                run_experiment_on_gpu $gpu_id "${EXPERIMENTS[$exp_idx]}" $((exp_idx + 1))
                
                if [ $? -eq 0 ]; then
                    ((completed++))
                else
                    ((failed++))
                fi
                
                # Brief pause between experiments on same GPU
                sleep 30
            done
        } &
        
        gpu_pids[$gpu_idx]=$!
        echo "üéØ GPU $gpu_id: Started with PID ${gpu_pids[$gpu_idx]}"
    done
    
    echo ""
    echo "‚è≥ Waiting for all GPUs to complete..."
    
    # Wait for all GPU processes to complete
    for gpu_idx in $(seq 0 $((ACTUAL_NUM_GPUS-1))); do
        wait ${gpu_pids[$gpu_idx]}
        echo "‚úÖ GPU ${GPU_ARRAY[$gpu_idx]} completed"
    done
    
else
    echo "üîÑ Single GPU detected - running sequentially..."
    
    for i in "${!EXPERIMENTS[@]}"; do
        run_experiment_on_gpu ${GPU_ARRAY[0]} "${EXPERIMENTS[$i]}" $((i + 1))
        
        if [ $? -eq 0 ]; then
            ((completed++))
        else
            ((failed++))
        fi
        
        # Brief pause between experiments
        sleep 60
    done
fi

# Summary
total_time=$(($(date +%s) - start_time))
echo ""
echo "üéâ Execution completed!"
echo "   Total experiments: $TOTAL_EXPERIMENTS"
echo "   Completed successfully: $completed"
echo "   Failed: $failed"
echo "   Total time: $((total_time/3600))h $((total_time%3600/60))m"
echo "   Average time per experiment: $((total_time/TOTAL_EXPERIMENTS/60)) minutes"
echo "   GPU utilization: $ACTUAL_NUM_GPUS GPUs"
echo ""

# Check results
echo "üìä Results summary:"
ls -la models/ablation/results/ | wc -l
echo "   Result directories created: $(ls -d models/ablation/results/ablation_* 2>/dev/null | wc -l)"

echo ""
echo "üìã Next steps:"
echo "   1. Check results: ls models/ablation/results/"
echo "   2. Run analysis: python run_updated_ablation.py --analysis-only"
echo "   3. Generate thesis figures and tables"
echo ""
echo "End Time: $(date)" 