name: CI

on:
  push:
    branches: [ main, develop, pytorch-rewrite ]
  pull_request:
    branches: [ main, pytorch-rewrite ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        # Install minimal CI dependencies
        pip install -r tests/requirements-ci.txt
        # Install core ML dependencies for testing
        pip install numpy pandas scikit-learn tensorflow torch
        pip install optuna  # For HPO tests
        pip install matplotlib  # For plotting in tests

    - name: Lint with flake8
      run: |
        flake8 models/ nature_models/ tests/ --exclude=models/archive --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 models/ nature_models/ tests/ --exclude=models/archive --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    # Note: Black formatting available locally with:
    # black models/ nature_models/ tests/ --exclude=models/archive/problematic/

    - name: Basic syntax check
      run: |
        python -c "
        import os
        import py_compile
        import sys
        
        def check_syntax(directory):
            errors = []
            for root, dirs, files in os.walk(directory):
                # Skip problematic archive files
                if 'archive/problematic' in root:
                    continue
                for file in files:
                    if file.endswith('.py'):
                        filepath = os.path.join(root, file)
                        try:
                            py_compile.compile(filepath, doraise=True)
                        except py_compile.PyCompileError as e:
                            errors.append(f'Syntax error in {filepath}: {e}')
            return errors
        
        all_errors = []
        for directory in ['models', 'nature_models', 'tests']:
            if os.path.exists(directory):
                all_errors.extend(check_syntax(directory))
        
        if all_errors:
            print('‚ùå Syntax errors found:')
            for error in all_errors:
                print(f'  {error}')
            sys.exit(1)
        else:
            print('‚úÖ All Python files have valid syntax')
        "

    - name: Validate dataset integrity
      run: |
        python models/data_validation.py --data-dir data --verify || echo "‚ö†Ô∏è No dataset manifest found - skipping validation"

    - name: Run core tests
      run: |
        python -c "
        import subprocess
        import sys
        
        # Try to import codecarbon for energy tracking
        try:
            import codecarbon
            print('üå± Energy tracking enabled')
            tracker = codecarbon.EmissionsTracker(project_name='EVEREST-CI', output_dir='ci_emissions')
            tracker.start()
            energy_tracking = True
        except ImportError:
            print('‚ö†Ô∏è codecarbon not available - running tests without energy tracking')
            energy_tracking = False
        
        # Run the tests on the tests directory
        result = subprocess.run([sys.executable, '-m', 'pytest', 'tests/', '-v', '--tb=short', '-x'])
        
        # Stop energy tracking if enabled
        if energy_tracking:
            try:
                emissions = tracker.stop()
                print(f'üå± CI Energy Usage: {emissions:.6f} kg CO2eq')
            except:
                print('‚ö†Ô∏è Energy tracking completed with issues')
        
        sys.exit(result.returncode)
        "

    - name: Archive energy logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-energy-logs
        path: ci_emissions/
        retention-days: 30

    - name: Test training config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from training.config import validate_config, get_all_experiments
            validate_config()
            experiments = get_all_experiments()
            print(f'‚úì Training config valid. Found {len(experiments)} experiments.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Training config not available in this branch: {e}')
            print('‚úì Skipping training config validation')
        except Exception as e:
            print(f'‚ùå Training config validation failed: {e}')
            exit(1)
        "

    - name: Test ablation config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from ablation.config import validate_ablation_config
            validate_ablation_config()
            print('‚úì Ablation config valid.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Ablation config not available in this branch: {e}')
            print('‚úì Skipping ablation config validation')
        except Exception as e:
            print(f'‚ùå Ablation config validation failed: {e}')
            exit(1)
        "

    - name: Test HPO config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from hpo.config import validate_hpo_config
            validate_hpo_config()
            print('‚úì HPO config valid.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  HPO config not available in this branch: {e}')
            print('‚úì Skipping HPO config validation')
        except Exception as e:
            print(f'‚ùå HPO config validation failed: {e}')
            exit(1)
        "

    - name: Branch-specific tests
      run: |
        # Detect current branch and run branch-specific tests
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Running tests for branch: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" == "pytorch-rewrite" ]]; then
          echo "üî• Running PyTorch-specific tests"
          python -c "
          try:
              import torch
              print(f'PyTorch version: {torch.__version__}')
              # Test basic PyTorch functionality
              x = torch.randn(2, 3)
              print('‚úì PyTorch basic operations working')
          except Exception as e:
              print(f'‚ùå PyTorch tests failed: {e}')
              exit(1)
          "
        elif [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "üß† Running TensorFlow-specific tests"
          python -c "
          try:
              import tensorflow as tf
              print(f'TensorFlow version: {tf.__version__}')
              # Test basic TensorFlow functionality
              x = tf.constant([[1.0, 2.0], [3.0, 4.0]])
              print('‚úì TensorFlow basic operations working')
          except Exception as e:
              print(f'‚ùå TensorFlow tests failed: {e}')
              exit(1)
          "
        else
          echo "‚ÑπÔ∏è  Running generic tests for branch: $BRANCH_NAME"
        fi
