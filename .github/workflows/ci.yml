name: CI

on:
  push:
    branches: [ main, develop, pytorch-rewrite ]
  pull_request:
    branches: [ main, pytorch-rewrite ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        # Install minimal CI dependencies
        pip install -r tests/requirements-ci.txt
        # Install core ML dependencies for testing
        pip install numpy pandas scikit-learn tensorflow torch
        pip install optuna  # For HPO tests

    - name: Lint with flake8
      run: |
        flake8 models/ nature_models/ tests/ --exclude=models/archive --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 models/ nature_models/ tests/ --exclude=models/archive --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff models/ nature_models/ tests/

    - name: Run core tests
      run: |
        pytest tests/test_*.py -v --tb=short -x

    - name: Test training config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from training.config import validate_config, get_all_experiments
            validate_config()
            experiments = get_all_experiments()
            print(f'‚úì Training config valid. Found {len(experiments)} experiments.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Training config not available in this branch: {e}')
            print('‚úì Skipping training config validation')
        except Exception as e:
            print(f'‚ùå Training config validation failed: {e}')
            exit(1)
        "

    - name: Test ablation config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from ablation.config import validate_ablation_config
            validate_ablation_config()
            print('‚úì Ablation config valid.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Ablation config not available in this branch: {e}')
            print('‚úì Skipping ablation config validation')
        except Exception as e:
            print(f'‚ùå Ablation config validation failed: {e}')
            exit(1)
        "

    - name: Test HPO config
      run: |
        python -c "
        import sys
        sys.path.append('models')
        try:
            from hpo.config import validate_hpo_config
            validate_hpo_config()
            print('‚úì HPO config valid.')
        except ImportError as e:
            print(f'‚ö†Ô∏è  HPO config not available in this branch: {e}')
            print('‚úì Skipping HPO config validation')
        except Exception as e:
            print(f'‚ùå HPO config validation failed: {e}')
            exit(1)
        "

    - name: Branch-specific tests
      run: |
        # Detect current branch and run branch-specific tests
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Running tests for branch: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" == "pytorch-rewrite" ]]; then
          echo "üî• Running PyTorch-specific tests"
          python -c "
          try:
              import torch
              print(f'PyTorch version: {torch.__version__}')
              # Test basic PyTorch functionality
              x = torch.randn(2, 3)
              print('‚úì PyTorch basic operations working')
          except Exception as e:
              print(f'‚ùå PyTorch tests failed: {e}')
              exit(1)
          "
        elif [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "üß† Running TensorFlow-specific tests"
          python -c "
          try:
              import tensorflow as tf
              print(f'TensorFlow version: {tf.__version__}')
              # Test basic TensorFlow functionality
              x = tf.constant([[1.0, 2.0], [3.0, 4.0]])
              print('‚úì TensorFlow basic operations working')
          except Exception as e:
              print(f'‚ùå TensorFlow tests failed: {e}')
              exit(1)
          "
        else
          echo "‚ÑπÔ∏è  Running generic tests for branch: $BRANCH_NAME"
        fi
